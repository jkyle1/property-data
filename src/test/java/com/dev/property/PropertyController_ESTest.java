/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 04 12:46:28 GMT 2018
 */

package com.dev.property;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dev.property.PropertyController;
import com.dev.property.domain.services.PropertyCalculationService;
import com.dev.property.repository.PropertyRepository;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.springframework.ui.Model;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PropertyController_ESTest extends PropertyController_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn("Filter predicate must not be null!").when(propertyCalculationService0).calculatePriceDifference(anyString() , anyString());
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String string0 = propertyController0.priceDifference("PropertyService calculateAveragePrice Exception:  ", "");
      assertEquals("Filter predicate must not be null!", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(propertyCalculationService0).calculatePriceDifference(anyString() , anyString());
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String string0 = propertyController0.priceDifference("flats", "[}%l=3JN?+xi");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(propertyCalculationService0).calculateHighestPrice(any(byte.class));
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String[] stringArray1 = propertyController0.highestPrice((byte)58);
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(propertyCalculationService0).calculateHighestPrice(any(byte.class));
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String[] stringArray1 = propertyController0.highestPrice((byte) (-81));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(propertyCalculationService0).calculateAveragePrice(anyString());
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String string0 = propertyController0.averagePrice("property/list");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn("").when(propertyCalculationService0).calculateAveragePrice(anyString());
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String string0 = propertyController0.averagePrice("IlL!<4qV!x/e*2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController((PropertyCalculationService) null, propertyRepository0);
      // Undeclared exception!
      try { 
        propertyController0.highestPrice((byte) (-107));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dev.property.PropertyController", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PropertyController propertyController0 = new PropertyController((PropertyCalculationService) null, (PropertyRepository) null);
      // Undeclared exception!
      try { 
        propertyController0.averagePrice("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dev.property.PropertyController", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(propertyCalculationService0).calculateHighestPrice(any(byte.class));
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String[] stringArray0 = propertyController0.highestPrice((byte)0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(propertyRepository0).findAll();
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      Model model0 = mock(Model.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        propertyController0.propertiesList(model0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PropertyCalculationService propertyCalculationService0 = mock(PropertyCalculationService.class, new ViolatedAssumptionAnswer());
      doReturn("properties").when(propertyCalculationService0).calculateAveragePrice(anyString());
      PropertyRepository propertyRepository0 = mock(PropertyRepository.class, new ViolatedAssumptionAnswer());
      PropertyController propertyController0 = new PropertyController(propertyCalculationService0, propertyRepository0);
      String string0 = propertyController0.averagePrice("properties");
      assertEquals("properties", string0);
  }
}
