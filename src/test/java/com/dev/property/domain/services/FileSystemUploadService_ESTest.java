/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 04 14:12:26 GMT 2018
 */

package com.dev.property.domain.services;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dev.property.domain.services.FileSystemUploadService;
import com.dev.property.upload.UploadProperties;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.springframework.core.io.Resource;
import org.springframework.web.multipart.MultipartFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileSystemUploadService_ESTest extends FileSystemUploadService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      uploadProperties0.setLocation("4Yzf");
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      fileSystemUploadService0.deleteAll();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.store((MultipartFile) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.dev.property.domain.services.FileSystemUploadService", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.loadAsResource("\u0000");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.loadAsResource((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      uploadProperties0.setLocation("vK{~F>P");
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.loadAll();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Failed to read stored files
         //
         verifyException("com.dev.property.domain.services.FileSystemUploadService", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.load("\u0000");
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.load((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      uploadProperties0.setLocation("\u0000");
      FileSystemUploadService fileSystemUploadService0 = null;
      try {
        fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
        fail("Expecting exception: InvalidPathException");
      
      } catch(InvalidPathException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      uploadProperties0.setLocation((String) null);
      FileSystemUploadService fileSystemUploadService0 = null;
      try {
        fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      // Undeclared exception!
      try { 
        fileSystemUploadService0.loadAsResource("?C%^7MnmOp+k'P\"E4#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not read file: ?C%^7MnmOp+k'P\"E4#
         //
         verifyException("com.dev.property.domain.services.FileSystemUploadService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      Resource resource0 = fileSystemUploadService0.loadAsResource("/");
      assertFalse(resource0.isOpen());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      Stream<Path> stream0 = fileSystemUploadService0.loadAll();
      assertNotNull(stream0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UploadProperties uploadProperties0 = new UploadProperties();
      FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
      Path path0 = fileSystemUploadService0.load("8]?B");
      assertNotNull(path0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          UploadProperties uploadProperties0 = new UploadProperties();
          FileSystemUploadService fileSystemUploadService0 = new FileSystemUploadService(uploadProperties0);
          // Undeclared exception!
          try { 
            fileSystemUploadService0.init();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.io.FilePermission\" \"upload-dir\" \"write\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             // sun.nio.fs.UnixPath.checkWrite(UnixPath.java:801)
             // sun.nio.fs.UnixFileSystemProvider.createDirectory(UnixFileSystemProvider.java:376)
             // java.nio.file.Files.createDirectory(Files.java:674)
             // java.nio.file.Files.createAndCheckIsDirectory(Files.java:781)
             // java.nio.file.Files.createDirectories(Files.java:727)
             // com.dev.property.domain.services.FileSystemUploadService.init(FileSystemUploadService.java:102)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
